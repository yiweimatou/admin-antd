'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialFetchConfig = {
    needAuth: false
};
function checkStatus(data) {
    if (data.code === 401) {
        localStorage.clear();
        window.location.reload();
    }
    return data;
}
var ApiClient = {
    get: function get(url, params) {
        var fetchConfig = arguments.length <= 2 || arguments[2] === undefined ? initialFetchConfig : arguments[2];

        var body = void 0;
        if (fetchConfig.needAuth) {
            var auth = JSON.parse(localStorage.getItem('auth'));
            var key = auth.key;
            var token = auth.token;

            body = 'key=' + key + '&token=' + token + '&' + queryString(params);
        } else {
            body = queryString(params);
        }
        return (0, _isomorphicFetch2.default)(url + '?' + body, {
            method: 'GET'
        }).then(function (response) {
            return response.ok ? response.json() : _promise2.default.reject(response.status + ':' + response.statusText);
        }).then(function (data) {
            var code = data.code;
            var msg = data.msg;

            if (code === 200) {
                return data;
            } else {
                return _promise2.default.reject(msg);
            }
        });
    },
    post: function post(url, params) {
        var fetchConfig = arguments.length <= 2 || arguments[2] === undefined ? initialFetchConfig : arguments[2];

        var body = void 0;
        if (fetchConfig.needAuth) {
            var auth = JSON.parse(localStorage.getItem('auth'));
            var key = auth.key;
            var token = auth.token;

            body = 'key=' + key + '&token=' + token + '&' + queryString(params);
        } else {
            body = queryString(params);
        }
        return (0, _isomorphicFetch2.default)(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: body
        }).then(function (response) {
            return response.ok ? response.json() : _promise2.default.reject(response.status + ':' + response.statusText);
        }).then(function (data) {
            return checkStatus(data);
        }).then(function (data) {
            var code = data.code;
            var msg = data.msg;

            if (code === 200) {
                return data;
            } else {
                return _promise2.default.reject(msg);
            }
        });
    },
    put: function put(url, params) {
        var auth = JSON.parse(localStorage.getItem('auth'));
        var key = auth.key;
        var token = auth.token;

        var body = 'key=' + key + '&token=' + token + '&' + queryString(params);
        return (0, _isomorphicFetch2.default)(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: body
        }).then(function (response) {
            return response.ok ? response.json() : _promise2.default.reject(response.status + ':' + response.statusText);
        }).then(function (data) {
            return checkStatus(data);
        }).then(function (data) {
            var code = data.code;
            var msg = data.msg;

            if (code === 200) {
                return data;
            } else {
                return _promise2.default.reject(msg);
            }
        });
    },
    remove: function remove(url, params) {
        var auth = JSON.parse(localStorage.getItem('auth'));
        var key = auth.key;
        var token = auth.token;

        var body = 'key=' + key + '&token=' + token + '&' + queryString(params);
        return (0, _isomorphicFetch2.default)(url, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: body
        }).then(function (response) {
            return response.ok ? response.json() : _promise2.default.reject(response.status + ':' + response.statusText);
        }).then(function (data) {
            return checkStatus(data);
        }).then(function (data) {
            var code = data.code;
            var msg = data.msg;

            if (code === 200) {
                return data;
            } else {
                return _promise2.default.reject(msg);
            }
        });
    }
};

function queryString(params) {
    var s = '';
    for (var p in params) {
        if (params.hasOwnProperty(p)) {
            s += p + '=' + params[p] + '&';
        }
    }
    return s;
}

exports.default = ApiClient;