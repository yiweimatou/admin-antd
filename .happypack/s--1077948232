'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _css = require('antd/lib/message/style/css');

var _message = require('antd/lib/message');

var _message2 = _interopRequireDefault(_message);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

exports.default = _callee;

var _reduxSaga = require('redux-saga');

var _effects = require('redux-saga/effects');

var _auth = require('../services/auth');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = [loginHandler, watchLogin, watchLogout, changePasswordHandler, watchChangePassword, _callee].map(_regenerator2.default.mark);

function loginHandler(action) {
    var _action$payload, account, pwd, res, key, token, lastLoginTime;

    return _regenerator2.default.wrap(function loginHandler$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    _context.prev = 0;
                    _action$payload = action.payload;
                    account = _action$payload.account;
                    pwd = _action$payload.pwd;
                    _context.next = 6;
                    return (0, _effects.call)(_auth.login, account, pwd);

                case 6:
                    res = _context.sent;
                    key = res.key;
                    token = res.token;
                    lastLoginTime = Date.now();
                    _context.next = 12;
                    return (0, _effects.put)({
                        type: 'login/success',
                        payload: {
                            key: key, token: token, lastLoginTime: lastLoginTime
                        }
                    });

                case 12:
                    localStorage.setItem('auth', (0, _stringify2.default)({
                        key: key, token: token, isAuthed: true, lastLoginTime: lastLoginTime
                    }));
                    _message2.default.success('登录成功!');
                    _context.next = 21;
                    break;

                case 16:
                    _context.prev = 16;
                    _context.t0 = _context['catch'](0);

                    _message2.default.error(_context.t0);
                    _context.next = 21;
                    return (0, _effects.put)({
                        type: 'login/failure'
                    });

                case 21:
                case 'end':
                    return _context.stop();
            }
        }
    }, _marked[0], this, [[0, 16]]);
}

function watchLogin() {
    return _regenerator2.default.wrap(function watchLogin$(_context2) {
        while (1) {
            switch (_context2.prev = _context2.next) {
                case 0:
                    return _context2.delegateYield((0, _reduxSaga.takeLatest)('login', loginHandler), 't0', 1);

                case 1:
                case 'end':
                    return _context2.stop();
            }
        }
    }, _marked[1], this);
}

function watchLogout() {
    return _regenerator2.default.wrap(function watchLogout$(_context3) {
        while (1) {
            switch (_context3.prev = _context3.next) {
                case 0:
                    return _context3.delegateYield((0, _reduxSaga.takeLatest)('logout', function () {
                        localStorage.clear();
                        _message2.default.success('成功登出');
                        window.location.reload();
                    }), 't0', 1);

                case 1:
                case 'end':
                    return _context3.stop();
            }
        }
    }, _marked[2], this);
}

function changePasswordHandler(action) {
    var _action$payload2, pwd, old_pwd;

    return _regenerator2.default.wrap(function changePasswordHandler$(_context4) {
        while (1) {
            switch (_context4.prev = _context4.next) {
                case 0:
                    _context4.prev = 0;
                    _action$payload2 = action.payload;
                    pwd = _action$payload2.pwd;
                    old_pwd = _action$payload2.old_pwd;
                    _context4.next = 6;
                    return (0, _effects.call)(_auth.changePassword, old_pwd, pwd);

                case 6:
                    _context4.next = 8;
                    return (0, _effects.put)({
                        type: 'changePassword/success'
                    });

                case 8:
                    _message2.default.success('修改成功!');
                    _context4.next = 16;
                    break;

                case 11:
                    _context4.prev = 11;
                    _context4.t0 = _context4['catch'](0);

                    _message2.default.error(_context4.t0);
                    _context4.next = 16;
                    return (0, _effects.put)({
                        type: 'changePassword/failure'
                    });

                case 16:
                case 'end':
                    return _context4.stop();
            }
        }
    }, _marked[3], this, [[0, 11]]);
}

function watchChangePassword() {
    return _regenerator2.default.wrap(function watchChangePassword$(_context5) {
        while (1) {
            switch (_context5.prev = _context5.next) {
                case 0:
                    return _context5.delegateYield((0, _reduxSaga.takeLatest)('changePassword', changePasswordHandler), 't0', 1);

                case 1:
                case 'end':
                    return _context5.stop();
            }
        }
    }, _marked[4], this);
}

function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context6) {
        while (1) {
            switch (_context6.prev = _context6.next) {
                case 0:
                    _context6.next = 2;
                    return [(0, _effects.fork)(watchLogin), (0, _effects.fork)(watchLogout), (0, _effects.fork)(watchChangePassword)];

                case 2:
                case 'end':
                    return _context6.stop();
            }
        }
    }, _marked[5], this);
}