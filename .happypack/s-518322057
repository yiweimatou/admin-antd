'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CANCEL_SAGAS_HMR = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _effects = require('redux-saga/effects');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sagas = [_index2.default];

var CANCEL_SAGAS_HMR = exports.CANCEL_SAGAS_HMR = 'CANCEL_SAGAS_HMR';

function createAbortableSaga(saga) {
  if (process.env.NODE_ENV === 'development') {
    return _regenerator2.default.mark(function main() {
      var sagaTask;
      return _regenerator2.default.wrap(function main$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _effects.fork)(saga);

            case 2:
              sagaTask = _context.sent;
              _context.next = 5;
              return (0, _effects.take)(CANCEL_SAGAS_HMR);

            case 5:
              _context.next = 7;
              return (0, _effects.cancel)(sagaTask);

            case 7:
            case 'end':
              return _context.stop();
          }
        }
      }, main, this);
    });
  } else {
    return saga;
  }
}

var SagaManager = {
  startSagas: function startSagas(sagaMiddleware) {
    sagas.map(createAbortableSaga).forEach(function (saga) {
      return sagaMiddleware.run(saga);
    });
  },
  cancelSagas: function cancelSagas(store) {
    store.dispatch({
      type: CANCEL_SAGAS_HMR
    });
  }
};

exports.default = SagaManager;